#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const program = require("commander");
const npmPackage = require(path.join(__dirname, '..', 'package.json'));
const App = require("./application");
const chalk_1 = require("chalk");
// interface InitOptions extends Options {}
function issueEmitter(issue) {
    const { uri = '', row, col, text } = issue;
    console.log(`${chalk_1.default.green(uri)}[${row}, ${col}]: Unknown word: ${chalk_1.default.red(text)}`);
}
function issueEmitterWordsOnly(issue) {
    const { text } = issue;
    console.log(text);
}
function errorEmitter(message, error) {
    console.error(chalk_1.default.red(message), error);
    return Promise.resolve();
}
function infoEmitter(message) {
    console.info(chalk_1.default.yellow(message));
}
function debugEmitter(message) {
    console.info(chalk_1.default.cyan(message));
}
function nullEmitter(_) { }
let showHelp = true;
program
    .version(npmPackage.version)
    .description('Spelling Checker for Code');
program
    .option('-c, --config <cspell.json>', 'Configuration file to use.  By default cspell looks for cspell.json in the current directory.')
    .option('-v, --verbose', 'display more information about the files being checked and the configuration')
    .option('--local <local>', 'Set language locals. i.e. "en,fr" for English and French, or "en-GB" for British English.')
    .option('--wordsOnly', 'Only output the words not found in the dictionaries.')
    .option('-u, --unique', 'Only output the first instance of a word not found in the dictionaries.')
    .option('--debug', 'Output information useful for debugging cspell.json files.')
    .option('-e, --exclude <glob>', 'Exclude files matching the glob pattern')
    .option('--no-color', 'Turn off color.')
    .arguments('<files...>')
    .action((files, options) => {
    const emitters = {
        issue: options.wordsOnly ? issueEmitterWordsOnly : issueEmitter,
        error: errorEmitter,
        info: options.verbose ? infoEmitter : nullEmitter,
        debug: options.debug ? debugEmitter : nullEmitter,
    };
    showHelp = false;
    App.lint(files, options, emitters).then(result => {
        console.error('CSpell: Files checked: %d, Issues found: %d in %d files', result.files, result.issues, result.filesWithIssues.size);
        process.exit(result.issues ? 1 : 0);
    }, (error) => {
        console.error(error.message);
        process.exit(1);
    });
});
program
    .command('trace')
    .description('Trace words')
    .arguments('<words...>')
    .option('-c, --config <cspell.json>', 'Configuration file to use.  By default cspell looks for cspell.json in the current directory.')
    .action((words, options) => {
    showHelp = false;
    App.trace(words, options).then(() => process.exit(0), (error) => {
        console.error(error.message);
        process.exit(1);
    });
});
/*
program
    .command('init')
    .description('(Alpha) Initialize a cspell.json file.')
    .option('-o, --output <cspell.json>', 'define where to write file.')
    .option('--extends <cspell.json>', 'extend an existing cspell.json file.')
    .action((options: InitOptions) => {
        showHelp = false;
        CSpellApplication.createInit(options).then(
            () => process.exit(0),
            () => process.exit(1)
        );
        console.log('Init');
    });
*/
program.parse(process.argv);
if (showHelp) {
    program.help();
}
//# sourceMappingURL=app.js.map