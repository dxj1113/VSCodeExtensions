"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SpellSettings = require("./CSpellSettingsServer");
const defaultLocal = 'en';
exports.defaultLanguageSettings = [
    { languageId: '*', local: 'en', dictionaries: ['wordsEn'], },
    { languageId: '*', local: 'en-US', dictionaries: ['wordsEn'], },
    { languageId: '*', local: 'en-GB', dictionaries: ['wordsEnGb'], },
    { languageId: '*', dictionaries: ['companies', 'softwareTerms', 'misc', 'filetypes'], },
    { languageId: 'go', allowCompoundWords: true, dictionaries: ['go'], },
    { languageId: 'c', allowCompoundWords: true, dictionaries: ['cpp'], },
    { languageId: 'cpp', allowCompoundWords: true, dictionaries: ['cpp'], },
    { languageId: 'csharp', allowCompoundWords: true, dictionaries: ['csharp', 'dotnet', 'npm'] },
    { languageId: 'javascript', dictionaries: ['typescript', 'node', 'npm'] },
    { languageId: 'javascriptreact', dictionaries: ['typescript', 'node', 'npm'] },
    { languageId: 'typescript', dictionaries: ['typescript', 'node', 'npm'] },
    { languageId: 'typescriptreact', dictionaries: ['typescript', 'node', 'npm'] },
    { languageId: 'html', dictionaries: ['html', 'fonts', 'typescript', 'css', 'npm'] },
    { languageId: 'latex', dictionaries: ['latex'] },
    { languageId: 'markdown', dictionaries: ['npm'] },
    { languageId: 'jade', dictionaries: ['html', 'fonts', 'typescript', 'css', 'npm'] },
    { languageId: 'json', dictionaries: ['node', 'npm'] },
    { languageId: 'pug', dictionaries: ['html', 'fonts', 'typescript', 'css', 'npm'] },
    { languageId: 'php', dictionaries: ['php', 'html', 'fonts', 'css', 'typescript', 'npm'] },
    { languageId: 'css', dictionaries: ['fonts', 'css'] },
    { languageId: 'less', dictionaries: ['fonts', 'css'] },
    { languageId: 'scss', dictionaries: ['fonts', 'css'] },
    { languageId: 'map', enabled: false },
    { languageId: 'image', enabled: false },
    { languageId: 'binary', enabled: false },
    {
        languageId: 'python',
        allowCompoundWords: true,
        dictionaries: ['python'],
        ignoreRegExpList: ['binary_string', 'unicode_string'],
        patterns: [
            { name: 'binary_string', pattern: "\\bb'" },
            { name: 'unicode_string', pattern: "\\bu'" }
        ]
    },
];
function getDefaultLanguageSettings() {
    return { languageSettings: exports.defaultLanguageSettings };
}
exports.getDefaultLanguageSettings = getDefaultLanguageSettings;
function NormalizeLocal(local) {
    return local.toLowerCase().replace(/[^a-z]/g, '');
}
function calcSettingsForLanguage(languageSettings, languageId, local) {
    local = NormalizeLocal(local);
    return exports.defaultLanguageSettings.concat(languageSettings)
        .filter(s => s.languageId === '*' || s.languageId === languageId)
        .filter(s => !s.local || NormalizeLocal(s.local) === local || s.local === '*')
        .reduce((langSetting, setting) => (Object.assign({}, SpellSettings.mergeSettings(langSetting, setting), { languageId,
        local })));
}
exports.calcSettingsForLanguage = calcSettingsForLanguage;
function calcUserSettingsForLanguage(settings, languageId) {
    const { languageSettings = [], language: local = defaultLocal } = settings;
    const defaults = {
        allowCompoundWords: settings.allowCompoundWords,
        enabled: settings.enabled,
    };
    const langSettings = Object.assign({}, defaults, calcSettingsForLanguage(languageSettings, languageId, local));
    return SpellSettings.mergeSettings(settings, langSettings);
}
exports.calcUserSettingsForLanguage = calcUserSettingsForLanguage;
function calcSettingsForLanguageId(baseSettings, languageId) {
    const langIds = ['*'].concat(languageId instanceof Array ? languageId : [languageId]);
    const langSettings = langIds.reduce((settings, languageId) => {
        return calcUserSettingsForLanguage(settings, languageId);
    }, baseSettings);
    return langSettings;
}
exports.calcSettingsForLanguageId = calcSettingsForLanguageId;
//# sourceMappingURL=LanguageSettings.js.map