"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const trie_1 = require("./trie");
const importExport_1 = require("./importExport");
const Rx = require("rxjs/Rx");
const fs = require("fs-extra");
const path = require("path");
const zlib = require("zlib");
function readTrieFile(configLocation) {
    return __awaiter(this, void 0, void 0, function* () {
        const buffer = yield fs.readFile(configLocation);
        const json = buffer.toString();
        const config = JSON.parse(json.replace(/\/\/.*/g, ''));
        const dictDef = config && config.dictionaryDefinitions && config.dictionaryDefinitions[0] || {};
        const dictPath = dictDef.file || '';
        const pathToDict = path.join(path.dirname(configLocation), dictPath);
        const trieFileContents = yield fs.readFile(pathToDict)
            .then(buffer => zlib.gunzipSync(buffer))
            .then(buffer => buffer.toString('UTF-8'));
        const trieLines = Rx.Observable.from(trieFileContents.split('\n'));
        const trieNode = importExport_1.importTrieRx(trieLines).take(1).toPromise();
        return trieNode.then(node => new trie_1.Trie(node));
    });
}
exports.readTrieFile = readTrieFile;
//# sourceMappingURL=reader.test.js.map