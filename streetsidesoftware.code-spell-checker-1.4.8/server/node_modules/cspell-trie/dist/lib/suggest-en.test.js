"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const suggest_1 = require("./suggest");
const reader_test_1 = require("./reader.test");
const cspellDict = require("cspell-dict-en_us");
let trie;
function getTrie() {
    if (!trie) {
        trie = reader_test_1.readTrieFile(cspellDict.getConfigLocation());
    }
    return trie;
}
describe('Validate English Suggestions', function () {
    this.timeout(30000);
    it('Tests suggestions', () => {
        return getTrie().then(trie => {
            const collector = suggest_1.suggestionCollector('joyful', 8);
            collector.collect(suggest_1.genCompoundableSuggestions(trie.root, collector.word, suggest_1.CompoundWordsMethod.NONE));
            const results = collector.suggestions;
            const suggestions = results.map(s => s.word);
            chai_1.expect(suggestions).to.contain('joyful');
            chai_1.expect(suggestions[0]).to.be.equal('joyful');
            chai_1.expect(suggestions).to.be.length(collector.maxNumSuggestions);
        });
    });
    it('Tests suggestions', () => {
        return getTrie().then(trie => {
            // cspell:ignore joyfull
            const collector = suggest_1.suggestionCollector('joyfull', 8);
            collector.collect(suggest_1.genCompoundableSuggestions(trie.root, collector.word, suggest_1.CompoundWordsMethod.SEPARATE_WORDS));
            const results = collector.suggestions;
            const suggestions = results.map(s => s.word);
            chai_1.expect(suggestions).to.contain('joyful');
            chai_1.expect(suggestions[0]).to.be.equal('joyfully');
            chai_1.expect(suggestions[1]).to.be.equal('joyful');
            chai_1.expect(suggestions).to.be.length(collector.maxNumSuggestions);
        });
    });
    it('Tests compound SEPARATE_WORDS suggestions', () => {
        return getTrie().then(trie => {
            // cspell:ignore onetwothreefour
            const collector = suggest_1.suggestionCollector('onetwothreefour', 8);
            collector.collect(suggest_1.genCompoundableSuggestions(trie.root, collector.word, suggest_1.CompoundWordsMethod.SEPARATE_WORDS));
            const results = collector.suggestions;
            const suggestions = results.map(s => s.word);
            chai_1.expect(suggestions).to.contain('one two three four');
            chai_1.expect(suggestions[0]).to.be.equal('one two three four');
            chai_1.expect(suggestions).to.be.length(collector.maxNumSuggestions);
        });
    });
    it('Tests compound JOIN_WORDS suggestions', () => {
        return getTrie().then(trie => {
            // cspell:ignore onetwothrefour
            const collector = suggest_1.suggestionCollector('onetwothreefour', 8);
            collector.collect(suggest_1.genCompoundableSuggestions(trie.root, collector.word, suggest_1.CompoundWordsMethod.JOIN_WORDS));
            const results = collector.suggestions;
            const suggestions = results.map(s => s.word);
            chai_1.expect(suggestions).to.contain('one+two+three+four');
            chai_1.expect(suggestions).to.be.length(collector.maxNumSuggestions);
        });
    });
    it('Tests compound suggestions', () => {
        return getTrie().then(trie => {
            // cspell:ignore onetwothrefour
            const collector = suggest_1.suggestionCollector('onetwothreefour', 8);
            collector.collect(suggest_1.genCompoundableSuggestions(trie.root, collector.word, suggest_1.CompoundWordsMethod.JOIN_WORDS));
            const results = collector.suggestions;
            const suggestions = results.map(s => s.word);
            chai_1.expect(suggestions).to.contain('one+two+three+four');
            chai_1.expect(suggestions).to.be.length(collector.maxNumSuggestions);
        });
    });
    // Takes a long time.
    it('Tests long compound suggestions', () => {
        return getTrie().then(trie => {
            // cspell:ignore testslongcompundsuggestions
            const collector = suggest_1.suggestionCollector('testslongcompundsuggestions', 1);
            collector.collect(suggest_1.genCompoundableSuggestions(trie.root, collector.word, suggest_1.CompoundWordsMethod.SEPARATE_WORDS));
            const results = collector.suggestions;
            const suggestions = results.map(s => s.word);
            // console.log('Results:');
            // console.log(results.map((r, i) => `${i} ${r.cost} ${r.word}`).join('\n'));
            chai_1.expect(suggestions).to.be.length(collector.maxNumSuggestions);
            chai_1.expect(suggestions).to.contain('tests long compound suggestions');
            chai_1.expect(suggestions[0]).to.be.equal('tests long compound suggestions');
        });
    });
});
//# sourceMappingURL=suggest-en.test.js.map