import * as Rx from 'rxjs/Rx';
import { IterableLike } from '../util/IterableLike';
import { Trie } from 'cspell-trie';
import { ReplaceMap } from '../util/repMap';
export interface SuggestionResult {
    word: string;
    cost: number;
}
export interface SpellingDictionary {
    readonly name: string;
    has(word: string): boolean;
    suggest(word: string, numSuggestions?: number): SuggestionResult[];
    mapWord(word: string): string;
    readonly size: number;
    readonly options: SpellingDictionaryOptions;
}
export interface SpellingDictionaryOptions {
    repMap?: ReplaceMap;
}
export declare class SpellingDictionaryFromSet implements SpellingDictionary {
    readonly words: Set<string>;
    readonly name: string;
    readonly options: SpellingDictionaryOptions;
    private _trie;
    readonly mapWord: (word: string) => string;
    constructor(words: Set<string>, name: string, options?: SpellingDictionaryOptions);
    readonly trie: Trie;
    has(word: string): boolean;
    suggest(word: string, numSuggestions?: number): SuggestionResult[];
    readonly size: number;
}
export declare function createSpellingDictionary(wordList: string[] | IterableLike<string>, name: string, options?: SpellingDictionaryOptions): SpellingDictionary;
export declare function createSpellingDictionaryRx(words: Rx.Observable<string>, name: string, options?: SpellingDictionaryOptions): Promise<SpellingDictionary>;
export declare class SpellingDictionaryFromTrie implements SpellingDictionary {
    readonly trie: Trie;
    readonly name: string;
    readonly options: SpellingDictionaryOptions;
    static readonly unknownWordsLimit: number;
    private _size;
    readonly knownWords: Set<string>;
    readonly unknownWords: Set<string>;
    readonly mapWord: (word: string) => string;
    constructor(trie: Trie, name: string, options?: SpellingDictionaryOptions);
    readonly size: number;
    has(word: string): boolean;
    suggest(word: string, numSuggestions?: number): SuggestionResult[];
}
export declare function createSpellingDictionaryTrie(data: Rx.Observable<string>, name: string, options?: SpellingDictionaryOptions): Promise<SpellingDictionary>;
