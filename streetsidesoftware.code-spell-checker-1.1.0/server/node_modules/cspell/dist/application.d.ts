import * as Rx from 'rxjs/Rx';
import * as cspell from './index';
export interface CSpellApplicationOptions {
    verbose?: boolean;
    debug?: boolean;
    config?: string;
    exclude?: string;
    wordsOnly?: boolean;
    unique?: boolean;
}
export interface AppError extends NodeJS.ErrnoException {
}
export interface RunResult {
    files: number;
    filesWithIssues: Set<string>;
    issues: number;
}
export interface Issue extends cspell.TextDocumentOffset {
}
export interface GlobSrcInfo {
    glob: string;
    regex: RegExp;
    source: string;
}
export interface MessageEmitter {
    (message: string): void;
}
export interface ErrorEmitter {
    (message: string, error: Error): Promise<void>;
}
export interface SpellingErrorEmitter {
    (issue: Issue): void;
}
export interface Emitters {
    issue: SpellingErrorEmitter;
    info: MessageEmitter;
    debug: MessageEmitter;
    error: ErrorEmitter;
}
export declare class CSpellApplication {
    readonly files: string[];
    readonly options: CSpellApplicationOptions;
    readonly emitters: Emitters;
    readonly info: (message?: any, ...args: any[]) => void;
    readonly debug: (message?: any, ...args: any[]) => void;
    readonly logIssue: (issue: Issue) => void;
    readonly uniqueFilter: (issue: Issue) => boolean;
    private configGlob;
    private configGlobOptions;
    private static defaultExcludeGlobs;
    private excludes;
    constructor(files: string[], options: CSpellApplicationOptions, emitters: Emitters);
    run(): Promise<RunResult>;
    static createInit(_: CSpellApplicationOptions): Promise<void>;
    protected header(): void;
    protected isExcluded(filename: string, globs: GlobSrcInfo[]): boolean;
    static findFiles(globPatterns: string[]): Rx.Observable<string>;
    protected filterFiles(files: Rx.Observable<string>, excludeGlobs: Promise<GlobSrcInfo[]>): Rx.Observable<string>;
    protected calcExcludeGlobInfo(commandLineExclude: string | undefined): GlobSrcInfo[];
    private static extractGlobExcludesFromConfig(filename, config);
}
