"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const gensequence_1 = require("gensequence");
const suggest_1 = require("./suggest");
const util_1 = require("./util");
class Trie {
    constructor(root) {
        this.root = root;
    }
    find(text) {
        let n = this.root;
        let p;
        for (p = 0; n && n.c && p < text.length; ++p) {
            n = n.c.get(text[p]);
        }
        return p === text.length ? n : undefined;
    }
    has(word) {
        const n = this.find(word);
        return !!n && util_1.isWordTerminationNode(n);
    }
    /**
     * Provides an ordered sequence of words with the prefix of text.
     */
    completeWord(text) {
        const n = this.find(text);
        return gensequence_1.genSequence(n && util_1.isWordTerminationNode(n) ? [text] : [])
            .concat(n ? util_1.iteratorTrieWords(n).map(suffix => text + suffix) : []);
    }
    /**
     * Suggest spellings for `text`.  The results are sorted by edit distance with changes near the beginning of a word having a greater impact.
     */
    suggest(text, maxNumSuggestions) {
        return this.suggestWithCost(text, maxNumSuggestions)
            .map(a => a.word);
    }
    /**
     * Suggest spellings for `text`.  The results are sorted by edit distance with changes near the beginning of a word having a greater impact.
     * The results include the word and adjusted edit cost.  This is useful for merging results from multiple tries.
     */
    suggestWithCost(text, maxNumSuggestions) {
        return suggest_1.suggest(this.root, text, maxNumSuggestions);
    }
    words() {
        return util_1.iteratorTrieWords(this.root);
    }
    /**
     * Allows iteration over the entire tree.
     * On the returned Iterator, calling .next(goDeeper: boolean), allows for controlling the depth.
     */
    iterate() {
        return util_1.walker(this.root);
    }
    insert(word) {
        util_1.insert(word, this.root);
        return this;
    }
    static create(words) {
        const root = util_1.createTriFromList(words);
        util_1.orderTrie(root);
        return new Trie(root);
    }
}
exports.Trie = Trie;
//# sourceMappingURL=trie.js.map