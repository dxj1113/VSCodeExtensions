import { Sequence } from 'gensequence';
import { TrieNode } from './TrieNode';
import { SuggestionResult } from './suggest';
import { WalkerIterator } from './util';
export declare class Trie {
    readonly root: TrieNode;
    constructor(root: TrieNode);
    find(text: string): TrieNode | undefined;
    has(word: string): boolean;
    /**
     * Provides an ordered sequence of words with the prefix of text.
     */
    completeWord(text: string): Sequence<string>;
    /**
     * Suggest spellings for `text`.  The results are sorted by edit distance with changes near the beginning of a word having a greater impact.
     */
    suggest(text: string, maxNumSuggestions: number): string[];
    /**
     * Suggest spellings for `text`.  The results are sorted by edit distance with changes near the beginning of a word having a greater impact.
     * The results include the word and adjusted edit cost.  This is useful for merging results from multiple tries.
     */
    suggestWithCost(text: string, maxNumSuggestions: number): SuggestionResult[];
    words(): Sequence<string>;
    /**
     * Allows iteration over the entire tree.
     * On the returned Iterator, calling .next(goDeeper: boolean), allows for controlling the depth.
     */
    iterate(): WalkerIterator;
    insert(word: string): this;
    static create(words: Iterable<string> | IterableIterator<string>): Trie;
}
