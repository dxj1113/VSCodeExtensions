"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const CSpellSettingsServer_1 = require("./CSpellSettingsServer");
const DefaultSettings_1 = require("./DefaultSettings");
const path = require("path");
describe('Validate CSpellSettingsServer', () => {
    it('tests mergeSettings', () => {
        chai_1.expect(CSpellSettingsServer_1.mergeSettings({}, {})).to.be.deep.equal({
            words: [],
            userWords: [],
            ignoreWords: [],
            flagWords: [],
            patterns: [],
            enabledLanguageIds: [],
            languageSettings: [],
            ignoreRegExpList: [],
            dictionaries: [],
            dictionaryDefinitions: [],
        });
    });
    it('tests mergeSettings', () => {
        chai_1.expect(CSpellSettingsServer_1.mergeSettings({}, { enabled: true })).to.be.deep.equal({
            enabled: true,
            words: [],
            userWords: [],
            ignoreWords: [],
            flagWords: [],
            patterns: [],
            enabledLanguageIds: [],
            languageSettings: [],
            ignoreRegExpList: [],
            dictionaries: [],
            dictionaryDefinitions: [],
        });
    });
    it('tests mergeSettings', () => {
        chai_1.expect(CSpellSettingsServer_1.mergeSettings({}, { enabled: false })).to.be.deep.equal({
            enabled: false,
            words: [],
            userWords: [],
            ignoreWords: [],
            flagWords: [],
            patterns: [],
            enabledLanguageIds: [],
            languageSettings: [],
            ignoreRegExpList: [],
            dictionaries: [],
            dictionaryDefinitions: [],
        });
    });
    it('tests mergeSettings', () => {
        chai_1.expect(CSpellSettingsServer_1.mergeSettings({ enabled: true }, { enabled: false })).to.be.deep.equal({
            enabled: false,
            words: [],
            userWords: [],
            ignoreWords: [],
            flagWords: [],
            patterns: [],
            enabledLanguageIds: [],
            languageSettings: [],
            ignoreRegExpList: [],
            dictionaries: [],
            dictionaryDefinitions: [],
        });
    });
    it('tests loading a missing cSpell.json file', () => {
        const filename = path.join(__dirname, '..', '..', 'samples', 'linked', 'cspell-missing.json');
        const settings = CSpellSettingsServer_1.readSettings(filename);
        chai_1.expect(settings).to.not.be.empty;
        chai_1.expect(settings.words).to.not.include('import');
    });
    it('tests loading a cSpell.json file', () => {
        const filename = path.join(__dirname, '..', '..', 'samples', 'linked', 'cspell-import.json');
        const settings = CSpellSettingsServer_1.readSettings(filename);
        chai_1.expect(settings).to.not.be.empty;
        chai_1.expect(settings.words).to.include('import');
    });
    it('tests loading a cSpell.json with multiple imports file', () => {
        const filename = path.join(__dirname, '..', '..', 'samples', 'linked', 'cspell-imports.json');
        const settings = CSpellSettingsServer_1.readSettings(filename);
        chai_1.expect(settings).to.not.be.empty;
        chai_1.expect(settings.words).to.include('import');
        chai_1.expect(settings.words).to.include('imports');
        // cspell:word leuk
        chai_1.expect(settings.words).to.include('leuk');
    });
    it('makes sure global settings is an object', () => {
        const settings = CSpellSettingsServer_1.getGlobalSettings();
        chai_1.expect(settings).to.not.be.empty;
        const merged = CSpellSettingsServer_1.mergeSettings(DefaultSettings_1.getDefaultSettings(), CSpellSettingsServer_1.getGlobalSettings());
        chai_1.expect(merged).to.not.be.empty;
    });
    it('verify clearing the file cache works', () => {
        CSpellSettingsServer_1.mergeSettings(DefaultSettings_1.getDefaultSettings(), CSpellSettingsServer_1.getGlobalSettings());
        chai_1.expect(CSpellSettingsServer_1.getCachedFileSize()).to.be.gt(0);
        CSpellSettingsServer_1.clearCachedFiles();
        chai_1.expect(CSpellSettingsServer_1.getCachedFileSize()).to.be.eq(0);
    });
});
//# sourceMappingURL=CSpellSettingsServer.test.js.map