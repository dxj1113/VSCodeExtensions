import { Sequence } from 'gensequence';
import { TrieNode } from './TrieNode';
export declare function insert(text: string, node?: TrieNode): TrieNode;
export declare function isWordTerminationNode(node: TrieNode): boolean;
/**
 * Sorts the nodes in a trie in place.
 */
export declare function orderTrie(node: TrieNode): void;
export interface YieldResult {
    text: string;
    node: TrieNode;
    depth: number;
}
/**
 * Generator an iterator that will walk the Trie parent then children in a depth first fashion that preserves sorted order.
 */
export declare function walk(node: TrieNode): Sequence<YieldResult>;
export declare const iterateTrie: typeof walk;
/**
 * Generate a Iterator that can walk a Trie and yield the words.
 */
export declare function iteratorTrieWords(node: TrieNode): Sequence<string>;
export interface WalkerIterator extends IterableIterator<YieldResult> {
    /**
     * Ask for the next result.
     * goDeeper of true tells the walker to go deeper in the Trie if possible. Default is true.
     * This can be used to limit the walker's depth.
     */
    next: (goDeeper?: boolean) => IteratorResult<YieldResult>;
    [Symbol.iterator]: () => WalkerIterator;
}
/**
 * Walks the Trie and yields a value at each node.
 * next(goDeeper: boolean):
 */
export declare function walker(root: TrieNode): WalkerIterator;
export declare function createRoot(): TrieNode;
export declare function createTriFromList(words: Iterable<string>): TrieNode;
