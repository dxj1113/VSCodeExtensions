"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fileWriter = require("./fileWriter");
const fileReader = require("./fileReader");
const Rx = require("rxjs/Rx");
const loremIpsum = require("lorem-ipsum");
const path = require("path");
const fs_extra_1 = require("fs-extra");
const fse = require("fs-extra");
describe('Validate the writer', () => {
    it('tests writing an Rx.Observable and reading it back.', () => {
        const text = loremIpsum({ count: 1000, format: 'plain', units: 'words' }) + ' éåáí';
        const data = text.split(/\b/);
        const filename = path.join(__dirname, '..', '..', 'temp', 'tests-writing-an-observable.txt');
        return Rx.Observable.from(fs_extra_1.mkdirp(path.dirname(filename)))
            .flatMap(() => {
            return fileWriter.writeToFileRxP(filename, Rx.Observable.from(data));
        })
            .concatMap(() => fileReader.textFileStreamRx(filename))
            .reduce((a, b) => a + b)
            .toPromise()
            .then(result => {
            chai_1.expect(result).to.equal(text);
        });
    });
    it('tests writing an Rx.Observable and reading it back. gz', () => {
        const text = loremIpsum({ count: 1000, format: 'plain', units: 'words' }) + ' éåáí';
        const data = text.split(/\b/);
        const filename = path.join(__dirname, '..', '..', 'temp', 'tests-writing-an-observable.txt.gz');
        return Rx.Observable.from(fs_extra_1.mkdirp(path.dirname(filename)))
            .flatMap(() => {
            return fileWriter.writeToFileRxP(filename, Rx.Observable.from(data));
        })
            .concatMap(() => fileReader.textFileStreamRx(filename))
            .reduce((a, b) => a + b)
            .toPromise()
            .then(result => {
            chai_1.expect(result).to.equal(text);
        });
    });
    it('tests writeToFile', () => {
        const text = loremIpsum({ count: 1000, format: 'plain', units: 'words' }) + ' éåáí';
        const filename = path.join(__dirname, '..', '..', 'temp', 'tests-writing.txt');
        return Rx.Observable.from(fs_extra_1.mkdirp(path.dirname(filename)))
            .flatMap(() => {
            const wStream = fileWriter.writeToFile(filename, text);
            return Rx.Observable.fromEvent(wStream, 'close');
        })
            .take(1)
            .concatMap(() => fse.readFile(filename))
            .map(buffer => buffer.toString('utf8'))
            .take(1)
            .toPromise()
            .then(result => {
            chai_1.expect(result).to.equal(text);
        });
    });
    it('tests writeToFile zip', () => {
        const text = loremIpsum({ count: 1000, format: 'plain', units: 'words' }) + ' éåáí';
        const filename = path.join(__dirname, '..', '..', 'temp', 'tests-writing.txt.gz');
        return Rx.Observable.from(fs_extra_1.mkdirp(path.dirname(filename)))
            .flatMap(() => {
            const wStream = fileWriter.writeToFile(filename, text);
            return Rx.Observable.fromEvent(wStream, 'close');
        })
            .take(1)
            .concatMap(() => fileReader.textFileStreamRx(filename))
            .reduce((a, b) => a + b)
            .toPromise()
            .then(result => {
            chai_1.expect(result).to.equal(text);
        });
    });
});
//# sourceMappingURL=fileWriter.test.js.map