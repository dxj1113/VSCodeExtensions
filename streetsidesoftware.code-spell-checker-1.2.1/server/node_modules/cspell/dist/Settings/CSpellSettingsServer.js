"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const json = require("comment-json");
const path = require("path");
const DictionarySettings_1 = require("./DictionarySettings");
const util = require("../util/util");
const currentSettingsFileVersion = '0.1';
exports.sectionCSpell = 'cSpell';
exports.defaultFileName = 'cSpell.json';
const defaultSettings = {
    version: currentSettingsFileVersion,
};
function readSettings(filename, defaultValues = defaultSettings) {
    const settings = readJsonFile(filename);
    const pathToSettings = path.dirname(filename);
    function readJsonFile(file) {
        try {
            return json.parse(fs.readFileSync(file).toString());
        }
        catch (err) {
        }
        return defaultValues;
    }
    // Fix up dictionaryDefinitions
    const dictionaryDefinitions = DictionarySettings_1.normalizePathForDictDefs(settings.dictionaryDefinitions || [], pathToSettings);
    const languageSettings = (settings.languageSettings || [])
        .map(langSetting => (Object.assign({}, langSetting, { dictionaryDefinitions: DictionarySettings_1.normalizePathForDictDefs(langSetting.dictionaryDefinitions || [], pathToSettings) })));
    return Object.assign({}, defaultValues, settings, { dictionaryDefinitions, languageSettings });
}
exports.readSettings = readSettings;
function readSettingsFiles(filenames) {
    return filenames.map(filename => readSettings(filename)).reduce((a, b) => mergeSettings(a, b), defaultSettings);
}
exports.readSettingsFiles = readSettingsFiles;
/**
 * Merges two lists of strings and removes duplicates.  Order is NOT preserved.
 */
function mergeList(left = [], right = []) {
    const setOfWords = new Set([...left, ...right]);
    return [...setOfWords.keys()];
}
function replaceIfNotEmpty(left = [], right = []) {
    const filtered = right.filter(a => !!a);
    if (filtered.length) {
        return filtered;
    }
    return left;
}
function mergeSettings(left, ...settings) {
    const rawSettings = settings.reduce((left, right) => (Object.assign({}, left, right, { words: mergeList(left.words, right.words), userWords: mergeList(left.userWords, right.userWords), flagWords: mergeList(left.flagWords, right.flagWords), ignoreWords: mergeList(left.ignoreWords, right.ignoreWords), enabledLanguageIds: replaceIfNotEmpty(left.enabledLanguageIds, right.enabledLanguageIds), ignoreRegExpList: mergeList(left.ignoreRegExpList, right.ignoreRegExpList), patterns: mergeList(left.patterns, right.patterns), dictionaryDefinitions: mergeList(left.dictionaryDefinitions, right.dictionaryDefinitions), dictionaries: mergeList(left.dictionaries, right.dictionaries), languageSettings: mergeList(left.languageSettings, right.languageSettings), enabled: right.enabled !== undefined ? right.enabled : left.enabled })), left);
    return util.clean(rawSettings);
}
exports.mergeSettings = mergeSettings;
function mergeInDocSettings(left, right) {
    const merged = Object.assign({}, mergeSettings(left, right), { includeRegExpList: mergeList(left.includeRegExpList, right.includeRegExpList) });
    return merged;
}
exports.mergeInDocSettings = mergeInDocSettings;
function finalizeSettings(settings) {
    // apply patterns to any RegExpLists.
    return Object.assign({}, settings, { ignoreRegExpList: applyPatterns(settings.ignoreRegExpList, settings.patterns), includeRegExpList: applyPatterns(settings.includeRegExpList, settings.patterns) });
}
exports.finalizeSettings = finalizeSettings;
function applyPatterns(regExpList = [], patterns = []) {
    const patternMap = new Map(patterns
        .map(def => [def.name.toLowerCase(), def.pattern]));
    return regExpList.map(p => patternMap.get(p.toString().toLowerCase()) || p);
}
//# sourceMappingURL=CSpellSettingsServer.js.map